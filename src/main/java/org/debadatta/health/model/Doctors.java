package org.debadatta.health.model;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import java.util.*;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Pattern;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Component

@Scope("prototype")
@DynamoDBTable(tableName = "Doctors")
public class Doctors {

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey(attributeName = "d_id")
    private String d_id;

    @DynamoDBAttribute(attributeName = "name")
    @NotNull(message = "Name can't be null")
    private String name;

    @DynamoDBAttribute(attributeName = "password")
    @NotNull(message = "Password can't be null")
    @Size(min = 6, message = "Your Password must be at least 6 character long")
    @Pattern(regexp = "^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{6,}$", message = "Password must contain at least one letter, one number, and one special character")
    private String password;

    @DynamoDBAttribute(attributeName = "age")
    @NotNull(message = "Age can't be null")
    private int age;

    @DynamoDBAttribute(attributeName = "specialization")
    @NotNull(message = "Specialization status cannot be null")
    private String specialization;

    @DynamoDBAttribute(attributeName = "experience")
    @NotNull(message = "Experience can't be null")
    private int experience;

    @DynamoDBAttribute(attributeName = "availability")
    @NotNull(message = "Availability status cannot be null")
    private Map<Date, List<String>> availability;

    @DynamoDBAttribute(attributeName = "profilePictureUrl")
    private String profilePictureUrl;

    public boolean isAvailable(Date a_date, String a_time) {

        if (availability.containsKey(a_date)) {
            List<String> availableTimes = availability.get(a_time);
            return availableTimes.contains(a_time);
        }
        return false;

    }

}
